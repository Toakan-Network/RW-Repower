name: release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: [self-hosted, windows]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild Path
        run: |
          $msbuildPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
          echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_ENV
        shell: powershell 

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5

      - name: Restore Packages
        run: nuget restore Source\RW-Repower.sln

      - name: Build solution
        run: |
          & "$env:MSBUILD_PATH" Source\RW-Repower.sln -t:rebuild -property:Configuration=Debug
        shell: powershell
      
      - name: Create Artifacts directory and copy DLL
        run: |
          # Create Artifacts directory if it doesn't exist
          if (-not (Test-Path "Artifacts")) {
            New-Item -ItemType Directory -Path "Artifacts"
            Write-Host "Created Artifacts directory"
          }
          
          # Copy the built DLL to Artifacts folder
          Copy-Item -Path "Source\bin\Debug\RW-Repower.dll" -Destination "Artifacts\RW-Repower.dll"
          Write-Host "Copied RW-Repower.dll to Artifacts folder"
        shell: powershell
      
      
      - name: Prepare Assemblies folder
        run: |
          New-Item -ItemType Directory -Force -Path Assemblies
          
          # Check if Artifacts folder exists and contains the DLL
          if (Test-Path "Artifacts\RW-Repower.dll") {
            Copy-Item "Artifacts\RW-Repower.dll" "Assemblies\"
            Write-Host "Copied RW-Repower.dll from Artifacts to Assemblies folder"
          } else {
            Write-Host "Error: RW-Repower.dll not found in Artifacts folder"
            exit 1
          }
        shell: powershell
      
      - name: Create Release Zip
        run: |
          # Create a clean temporary directory for the release
          $releaseDir = "release-temp"
          if (Test-Path $releaseDir) {
            Remove-Item -Recurse -Force $releaseDir
          }
          New-Item -ItemType Directory -Force -Path $releaseDir
          
          # Copy specific directories and files we want in the release
          Copy-Item "About" -Destination "$releaseDir\About" -Recurse -Force
          Copy-Item "Assemblies" -Destination "$releaseDir\Assemblies" -Recurse -Force
          Copy-Item "Defs" -Destination "$releaseDir\Defs" -Recurse -Force
          Copy-Item "LICENSE" -Destination "$releaseDir\LICENSE" -Force
          Copy-Item "README.md" -Destination "$releaseDir\README.md" -Force
          
          # Create zip from the clean directory
          Compress-Archive -Path "$releaseDir\*" -DestinationPath RW-Repower-Release.zip -Force
          
          # Clean up temp directory
          Remove-Item -Recurse -Force $releaseDir
        shell: powershell
      
      - name: Get commit messages since last release
        id: get_commits
        run: |
          # Get the latest release tag
          $ErrorActionPreference = "SilentlyContinue"
          $latestTag = git describe --tags --abbrev=0 2>$null
          $ErrorActionPreference = "Stop"
          
          if ($LASTEXITCODE -ne 0 -or -not $latestTag) {
            Write-Host "No previous release found. Getting all commits."
            # If no previous release, get all commits
            $commits = git log --pretty=format:"- %s (%h)" --no-merges
          } else {
            Write-Host "Previous release found: $latestTag. Getting commits since then."
            # Get commits since the last release
            $commits = git log "$latestTag..HEAD" --pretty=format:"- %s (%h)" --no-merges
          }
          
          if (-not $commits) {
            $commits = "- No new commits since last release"
          }
          
          # Escape for GitHub Actions output
          $commits = $commits -join "`n"
          echo "COMMIT_MESSAGES<<EOF" >> $env:GITHUB_ENV
          echo $commits >> $env:GITHUB_ENV
          echo "EOF" >> $env:GITHUB_ENV
        shell: powershell
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from commit ${{ github.sha }}
            
            ## Changes in this release:
            ${{ env.COMMIT_MESSAGES }}
            
            ---
            Built from latest main branch with compiled RW-Repower.dll
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./RW-Repower-Release.zip
          asset_name: RW-Repower-Release.zip
          asset_content_type: application/zip
      
      - name: Cleanup temporary files
        run: |
          # Remove temporary directories and files
          if (Test-Path "Assemblies") {
            Remove-Item -Recurse -Force "Assemblies"
            Write-Host "Removed Assemblies directory"
          }
          if (Test-Path "RW-Repower-Release.zip") {
            Remove-Item -Force "RW-Repower-Release.zip"
            Write-Host "Removed release zip file"
          }
          Write-Host "Cleanup completed"
        shell: powershell
      
      - name: Cleanup workspace
        if: always()
        run: |
          # Clean up the workspace contents (but not the workspace directory itself)
          Get-ChildItem -Force | ForEach-Object {
            try {
              Remove-Item -Path $_.FullName -Recurse -Force
              Write-Host "Removed: $($_.Name)"
            } catch {
              Write-Host "Could not remove: $($_.Name) - $($_.Exception.Message)"
            }
          }
          Write-Host "Workspace cleanup completed"
        shell: powershell
